<?php

require "apiproducts_catalog_product_owners.tokens.inc";
/**
 * Implements hook_apiproduct_catalog_node_postsave().
 */
function apiproduct_catalog_product_owners_apiproduct_catalog_node_postsave($node, $edge_api_product)
{
    $needs_save = false;
    $form = [];
    $form_state = [];

    nodeaccess_grants_form($form, $form_state, $node);
    $form_values = &$form_state['values'];

    /**
     * Make sure to take away the edit access from users.
     * You have to be on the "product_owner" custom attribute of API Product in edge to have this access.
     * Portal will grant you temporary access till the access is granted in edge till the next sync.
     */
    foreach($form_values['uid'] as $_uid => &$_grant){
        if($_grant['grant_update'] !== 0) {
            $_grant['grant_update'] = 0;
            $needs_save = true;
        }
    }
    /**
     * Make sure to take away the edit access from roles.
     * You have to be on the "product_owner_role" custom attribute of API Product in edge to have update access.
     * You have to be on the "audience" custom attribute of API Product in edge to have view access.
     * Portal will grant you temporary access till the access is granted in edge till the next sync.
     */
    foreach($form_values['rid'] as $_rid => &$_grant){
        if($_grant['grant_update'] !== 0) {
            $_grant['grant_update'] = 0;
            $needs_save = true;
        }
        if($_grant['grant_view'] !== 0) {
            $_grant['grant_view'] = 0;
            $needs_save = true;
        }
    }

    if (isset($edge_api_product->attributes['product_owner'])) {
        $owners = explode(",", $edge_api_product->attributes['product_owner']);
        foreach ($owners as $_key => $_owner) {
            $owners[$_key] = trim($_owner);
        }
        $accounts = user_load_multiple([], ['mail' => $owners]);
        if (!empty($accounts)) {


            foreach ($accounts as $account) {
                $form_values['uid'][$account->uid] = array(
                    'name' => $account->name,
                    'keep' => 1,
                    'grant_view' => 1,
                    'grant_update' => 1,
                    'grant_delete' => 0,
                );
                $needs_save = true;
            }

        }
    }
    if (isset($edge_api_product->attributes['product_owner_role'])) {
        $roles = explode(",", $edge_api_product->attributes['product_owner_role']);
        foreach ($roles as $i => $_role) {
            $roles[$i] = trim($_role);
        }
        $drupal_roles = array_intersect(user_roles(), $roles);

        if (!empty($drupal_roles)) {

            foreach ($drupal_roles as $_rid => $_role) {

                $form_values['rid'][$_rid] = array(
                    'name' => $_role,
                    'keep' => 1,
                    'grant_view' => 1,
                    'grant_update' => 1,
                    'grant_delete' => 0,
                );
                $needs_save = true;
            }
        }
    }
    if (isset($edge_api_product->attributes['audience_role'])) {
        $roles = explode(",", $edge_api_product->attributes['audience_role']);
        foreach ($roles as $i => $_role) {
            $roles[$i] = trim($_role);
        }
        $drupal_roles = array_intersect(user_roles(), $roles);

        if (!empty($drupal_roles)) {

            foreach ($drupal_roles as $_rid => $_role) {
                if(!isset($form_values['rid'][$_rid])) {
                    $form_values['rid'][$_rid] = array(
                        'name' => $_role,
                        'keep' => 1,
                        'grant_view' => 1,
                        'grant_update' => 0,
                        'grant_delete' => 0,
                    );
                } else {
                    $form_values['rid'][$_rid]['grant_view'] = 1;
                }
                $needs_save = true;
            }
        }
    }
    if($needs_save) {

        $form_state['values']['nid'] = $node->nid;
        $form_state['clicked_button']['#id'] = 'edit-submit';

        nodeaccess_grants_form_submit($form, $form_state);
        /**
         * trigger acquire grants for node
         */
        apiproduct_catalog_node_update($node);

    }
}

/**
 * Implements hook_node_access_records().
 */
function apiproduct_catalog_product_owners_node_access_records($node)
{
    $grants = [];
    if (isset($node->status) && !$node->status) {
        //Only do this for published nodes
        return $grants;
    }
    // Only write grants for published nodes.
    if ($node->type == 'smart_method') {

        $model_tid = $node->field_smart_method_model[LANGUAGE_NONE][0]['tid'];
        $query = new EntityFieldQuery();

        //Load the API Product nodes using the current model
        $result = $query->entityCondition("entity_type", "node")
            ->entityCondition("bundle", "edge_api_product")
            ->fieldCondition("field_smart_method_model", 'tid', $model_tid, '=')
            ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
            ->execute();
        if (empty($result['node'])) {
            return $grants;
        }
        $nodes = node_load_multiple(array_keys($result['node']));
        foreach ($nodes as $api_product_node) {
            /**
             * Load the API Product nodeaccess records for the API Product nodes since that would apply to the
             * SmartDocs nodes too.
             */
            $records = nodeaccess_node_access_records($api_product_node); //Load the nodeaccess records for the API Product node
            foreach ($records as $record) {
                $key = $record['realm'] . ":" . $record['gid'];
                if (!isset($grants[$key])) {
                    $grants[$key] = $record;
                } else {
                    /**
                     * Ensure corrects permissions for SmartDocs Models belonging to multiple API Products.
                     * If there are multiple entries make sure that the view, edit, delete permissions are merged
                     *
                     */
                    foreach (['grant_view', 'grant_update', 'grant_delete'] as $_grant) {
                        if ($grants[$key][$_grant] != 1 && $record[$_grant] == 1) {
                            $grants[$key][$_grant] = 1;
                        }
                    }
                }
            }
        }
    }
    return $grants;
}

/**
 * Implements hook_query_alter().
 */
function apiproduct_catalog_product_owners_query_alter(QueryAlterableInterface $query)
{
    if ($query->hasTag('check_edge_apiproduct_access')) {
        //dpm($query);
    }
}

/**
 * On submit of the nodeaccess grant settings trigger rewriting of the nodeaccess permissions
 * for all linked smartdocs method nodes
 *
 * @param $form
 * @param $form_state
 */
function apiproduct_catalog_product_owners_form_nodeaccess_grants_form_alter(&$form, $form_state)
{
    $node = node_load($form['nid']['#value']);
    if ($node->type == 'edge_api_product') {
        $form['#submit'][] = 'apiproduct_catalog_product_owners_nodeaccess_grants_form_submit';
    }
}

function apiproduct_catalog_product_owners_nodeaccess_grants_form_submit($form, $form_state)
{
    if ($form_state['clicked_button']['#id'] == 'edit-search') {
        return;
    }
    $nid = $form_state['values']['nid'];
    $node = node_load($nid);
    /**
     * Make sure to trigger the ACL rebuild after the nodeaccess grant form is submitted.
     */
    apiproduct_catalog_node_update($node);
}



/**
 * Implements hook_menu_alter().
 *
 * Make sure the you can access the nodeaccess page if you can edit the node.
 *
 */
function apiproduct_catalog_product_owners_menu_alter(&$items)
{
    if (isset($items['node/%node/grant'])) {
        $items['node/%node/grant']['access callback'] = 'node_access';
        $items['node/%node/grant']['access arguments'] = array('update', 1);
    }
}


/**
 * Implements hook_menu
 *
 * @return array
 */
function apiproduct_catalog_product_owners_menu(){
  $items = [];
  $items['node/%node/upload_openapi'] = [
    'title' => 'Upload Docs',
    'access callback' => 'node_access',
    'access arguments' => ['update', 1],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['apiproduct_catalog_product_owners_upload_openapi' , 1],
    'type' => MENU_LOCAL_TASK,
  ];
  return $items;
}

/**
 * Implements hook_admin_paths
 * @return array
 */
function apiproduct_catalog_product_owners_admin_paths(){
  return ['node/*/upload_openapi' => TRUE];
}

/**
 * Callback function for allowing the product owners to upload openapi specification for their APIs
 *
 * @param $form
 * @param $form_state
 * @param $node
 * @return array
 */
function apiproduct_catalog_product_owners_upload_openapi($form, $form_state, $node) {
  $edge_product = $node->field_edge_product_name[LANGUAGE_NONE][0]['value'];

  $entities = entity_load("api_product", array($edge_product), array('show_private' => TRUE), true);
  $entity = reset($entities);

  $table_data = [
    'caption' => 'Current specification files',
    'header' => ['API Name', 'File'],
    'rows' => [],
  ];

  foreach($entity->proxies as $proxy) {

    $term = reset(taxonomy_get_term_by_name($proxy, 'smartdocs_models'));

    $url = '';
    if(!empty($term->field_openapi_specification[LANGUAGE_NONE])) {
      $file = file_load($term->field_openapi_specification[LANGUAGE_NONE][0]['fid']);
      $uri = $file->uri;
      $url = file_create_url($uri);
    }

    $table_data['rows'][] = [$proxy, ($url == '' ? "missing" : l("Download", $url))];
  }
  $form['table']['#markup'] = theme('table', $table_data);
  $form['proxies'] = [
    '#title' => 'Select the Proxy you want to attach the specification to ?',
    '#type' => 'select',
    '#options' => array_combine($entity->proxies, $entity->proxies),
  ];
  $form['file'] = [
    '#title' => 'Select a file to upload',
    '#description' => 'Please upload an open api specification',
    '#type' => 'file',
    '#upload_location' => 'public://openapi_files/',
    '#upload_validators' => ['file_validate_extensions' => ['json', 'yaml']],
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => 'Submit',
  ];
  return $form;
}

/**
 *
 * Submit function which will add the openapi specification in the SmartDocs
 *
 * @param $form
 * @param $form_state
 * @throws \Apigee\Exceptions\ParameterException
 */
function apiproduct_catalog_product_owners_upload_openapi_submit($form, &$form_state){
  require_once drupal_get_path("module", "smartdocs") . "/smartdocs.admin.inc";
  $model_name = $form_state['values']['proxies'];

  if(!smartdocs_model_exist($model_name)) {
    /*
     * Add a model if it does not exist
     */
    $form_add_model = [];
    $form_state_add_model['values']['model_name'] = $model_name;
    $form_state_add_model['values']['display_name'] = $model_name;
    $form_state_add_model['values']['model_description'] = '';
    smartdocs_add_model_submit($form_add_model, $form_state_add_model);
  }

  $config = devconnect_default_org_config();
  $model = new \Apigee\SmartDocs\Model($config);
  $model->load($model_name);

  if($model->getLatestRevisionNumber() > 0) { //atleast one revision exists
    /*
     * Load the current revision and unpublish it
     */
    $revision = new \Apigee\SmartDocs\Revision($config, $model->getUuid());
    $revision->load($model->getLatestRevisionNumber());
    $selected = [];
    foreach ($revision->getResources() as $resource) {
      $method = new \Apigee\SmartDocs\Method($config, $model->getUuid(), $revision->getUuid(), $resource->getUuid());
      foreach ($method->listMethods() as $m) {
        $selected[] = $m->getUuid();
      }
    }
    $form_revision_details = [];
    $form_state_revision_details = [];
    $form_state_revision_details['values'] = [
      'model' => $model->toArray(),
      'operation' => 'unpublish_nodes',
      'revision' => $revision->toArray(),
      'methods' => $selected,
    ];
    smartdocs_revision_detail_submit($form_revision_details, $form_state_revision_details);

  }

  /*
   * Import the new version of the model
   */
  $form_state['values']['type'] = "swagger_" . array_pop(explode(".", $_FILES['files']['name']['file'])) ;
  $form_state['values']['model_uuid'] = $model->getUuid();
  $form_state['values']['upload_type'] = 'file';
  $form_import_model = [];
  smartdocs_import_model_submit($form_import_model, $form_state);

  /*
   * Load the latest version of the model
   */
  $model->load($model_name);
  $revision = new \Apigee\SmartDocs\Revision($config, $model->getUuid());
  $revision->load($model->getLatestRevisionNumber());
  $selected = [];
  foreach($revision->getResources() as $resource) {
    $method = new \Apigee\SmartDocs\Method($config, $model->getUuid(), $revision->getUuid(), $resource->getUuid());
    foreach($method->listMethods() as $m){
      $selected[] = $m->getUuid();
    }
  }

  /*
   * Publish the latest version
   */
  $form_revision_details = [];
  $form_state_revision_details = [];
  $form_state_revision_details['values'] = [
    'model' => $model->toArray(),
    'operation' => 'render_publish_nodes',
    'revision' => $revision->toArray(),
    'methods' => $selected,
  ];
  smartdocs_revision_detail_submit($form_revision_details, $form_state_revision_details);
  $form_state['redirect'] = url("$model_name/apis");
}
